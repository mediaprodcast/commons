// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: autoscaler.proto

package autoscaler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AutoscalerService_GetScalingRecommendations_FullMethodName = "/autoscaler.AutoscalerService/GetScalingRecommendations"
	AutoscalerService_ApplyScaling_FullMethodName              = "/autoscaler.AutoscalerService/ApplyScaling"
)

// AutoscalerServiceClient is the client API for AutoscalerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Autoscaler Service
type AutoscalerServiceClient interface {
	GetScalingRecommendations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ApplyScaling(ctx context.Context, in *ScalingRequest, opts ...grpc.CallOption) (*ScalingResponse, error)
}

type autoscalerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoscalerServiceClient(cc grpc.ClientConnInterface) AutoscalerServiceClient {
	return &autoscalerServiceClient{cc}
}

func (c *autoscalerServiceClient) GetScalingRecommendations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AutoscalerService_GetScalingRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoscalerServiceClient) ApplyScaling(ctx context.Context, in *ScalingRequest, opts ...grpc.CallOption) (*ScalingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScalingResponse)
	err := c.cc.Invoke(ctx, AutoscalerService_ApplyScaling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoscalerServiceServer is the server API for AutoscalerService service.
// All implementations must embed UnimplementedAutoscalerServiceServer
// for forward compatibility.
//
// Autoscaler Service
type AutoscalerServiceServer interface {
	GetScalingRecommendations(context.Context, *Empty) (*Empty, error)
	ApplyScaling(context.Context, *ScalingRequest) (*ScalingResponse, error)
	mustEmbedUnimplementedAutoscalerServiceServer()
}

// UnimplementedAutoscalerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAutoscalerServiceServer struct{}

func (UnimplementedAutoscalerServiceServer) GetScalingRecommendations(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScalingRecommendations not implemented")
}
func (UnimplementedAutoscalerServiceServer) ApplyScaling(context.Context, *ScalingRequest) (*ScalingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyScaling not implemented")
}
func (UnimplementedAutoscalerServiceServer) mustEmbedUnimplementedAutoscalerServiceServer() {}
func (UnimplementedAutoscalerServiceServer) testEmbeddedByValue()                           {}

// UnsafeAutoscalerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoscalerServiceServer will
// result in compilation errors.
type UnsafeAutoscalerServiceServer interface {
	mustEmbedUnimplementedAutoscalerServiceServer()
}

func RegisterAutoscalerServiceServer(s grpc.ServiceRegistrar, srv AutoscalerServiceServer) {
	// If the following call pancis, it indicates UnimplementedAutoscalerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AutoscalerService_ServiceDesc, srv)
}

func _AutoscalerService_GetScalingRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoscalerServiceServer).GetScalingRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoscalerService_GetScalingRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoscalerServiceServer).GetScalingRecommendations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoscalerService_ApplyScaling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScalingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoscalerServiceServer).ApplyScaling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoscalerService_ApplyScaling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoscalerServiceServer).ApplyScaling(ctx, req.(*ScalingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutoscalerService_ServiceDesc is the grpc.ServiceDesc for AutoscalerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoscalerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autoscaler.AutoscalerService",
	HandlerType: (*AutoscalerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScalingRecommendations",
			Handler:    _AutoscalerService_GetScalingRecommendations_Handler,
		},
		{
			MethodName: "ApplyScaling",
			Handler:    _AutoscalerService_ApplyScaling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autoscaler.proto",
}
